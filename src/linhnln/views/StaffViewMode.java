/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package linhnln.views;

import java.sql.Timestamp;
import java.util.Calendar;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import linhnln.dtos.DeviceDepartmentRelateMaintainanceDTO;
import linhnln.models.AutoCheckRequiredDeviceDAO;
import linhnln.models.DeviceDepartmentRelateMaintainanceDAO;
import mdlaf.MaterialLookAndFeel;
import linhnln.logger.LogFileText;

/**
 *
 * @author Liam Nguyen
 */
public class StaffViewMode extends javax.swing.JFrame {

    private DefaultTableModel tblDeviceModel = null;
    private static DefaultTableModel tblDeviceModelAttention = null;

    /**
     * Creates new form StaffViewMode
     */
    public StaffViewMode() {
        initComponents();
        tblDeviceModel = (DefaultTableModel) tblDeviceView.getModel();
        tblDeviceModelAttention = (DefaultTableModel) tblDeviceViewAttention.getModel();
        showAllDeviceManagingController();
        this.setLocation(100, 100);
        showListDeviceTobePayAttention();
    }
    
    private void viewRequiredDevice(List<DeviceDepartmentRelateMaintainanceDTO> dtos) {
        tblDeviceModelAttention.setRowCount(0);
        for (DeviceDepartmentRelateMaintainanceDTO dto : dtos) {
            tblDeviceModelAttention.addRow(dto.toVector());
        }
    }
    
    private void showListDeviceTobePayAttention() {
        try {
                AutoCheckRequiredDeviceDAO dao = new AutoCheckRequiredDeviceDAO();
                List<DeviceDepartmentRelateMaintainanceDTO> dtos = dao.autoGenerateNumberOfDevice();
                viewRequiredDevice(dtos);
        } catch (Exception e) {
//            e.printStackTrace();
            LogFileText.writeToLogFile("StaffViewMode", e.getMessage());
        }
    }

    private void showAllDeviceManagingController() {
        try {
            DeviceDepartmentRelateMaintainanceDAO dao = new DeviceDepartmentRelateMaintainanceDAO();
            List<DeviceDepartmentRelateMaintainanceDTO> result = dao.showAllDeviceManaging();
            viewAllDeviceList(result);
        } catch (Exception e) {
//            e.printStackTrace();
            LogFileText.writeToLogFile("StaffViewMode", e.getMessage());
        }
    }

    private void viewAllDeviceList(List<DeviceDepartmentRelateMaintainanceDTO> list) {
        tblDeviceModel.setRowCount(0);
        for (DeviceDepartmentRelateMaintainanceDTO deviceDTO : list) {
            tblDeviceModel.addRow(deviceDTO.toVector());
        }
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLocaleChooser1 = new com.toedter.components.JLocaleChooser();
        jSpinField1 = new com.toedter.components.JSpinField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDeviceView = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtDevID = new javax.swing.JTextField();
        txtDepID = new javax.swing.JTextField();
        txtResult = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtRepairContent = new javax.swing.JTextArea();
        btUpdate = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtRepID = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtStaffName = new javax.swing.JTextField();
        btSearch = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtDevIDToSearch = new javax.swing.JTextField();
        endDateChooser = new com.toedter.calendar.JDateChooser();
        btBack = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDeviceViewAttention = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        btGetRequiredDev = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 60, 112));
        jLabel1.setText("Device Repairing Management");

        tblDeviceView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RepID", "DepartmentName", "DeviceID", "DeviceName", "RequirementContent", "RepairContent", "RepairStartDate", "RepairEndDate", "Result", "StaffName"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDeviceView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDeviceViewMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDeviceView);
        if (tblDeviceView.getColumnModel().getColumnCount() > 0) {
            tblDeviceView.getColumnModel().getColumn(0).setMinWidth(40);
            tblDeviceView.getColumnModel().getColumn(0).setMaxWidth(50);
            tblDeviceView.getColumnModel().getColumn(1).setPreferredWidth(40);
            tblDeviceView.getColumnModel().getColumn(2).setMinWidth(80);
            tblDeviceView.getColumnModel().getColumn(2).setPreferredWidth(20);
            tblDeviceView.getColumnModel().getColumn(2).setMaxWidth(100);
            tblDeviceView.getColumnModel().getColumn(8).setPreferredWidth(20);
        }

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Device Update Information"));

        jLabel2.setText("Department ID:");

        jLabel3.setText("Device ID:");

        jLabel4.setText("Repair Content:");

        jLabel5.setText("Repair End Date:");

        jLabel6.setText("Result:");

        txtDepID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepIDActionPerformed(evt);
            }
        });

        txtRepairContent.setColumns(20);
        txtRepairContent.setRows(5);
        jScrollPane2.setViewportView(txtRepairContent);

        btUpdate.setText("Update");
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        jLabel7.setText("Repairing ID:");

        txtRepID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRepIDActionPerformed(evt);
            }
        });

        jLabel8.setText("Staff Name:");

        txtStaffName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStaffNameActionPerformed(evt);
            }
        });

        btSearch.setText("Search");
        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });

        jLabel9.setText("Input DeviceID to search: ");

        btBack.setText("Go Back");
        btBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(endDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtDepID, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDevID, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtRepID, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(66, 66, 66)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(txtStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDevIDToSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(btSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btBack, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5, jLabel6});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtRepID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDepID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDevID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(endDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(btSearch)
                    .addComponent(txtDevIDToSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btUpdate)
                    .addComponent(btBack))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5, jLabel6});

        tblDeviceViewAttention.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RepID", "DepartmentName", "DeviceID", "DeviceName", "RequirementContent", "RepairContent", "RepairStartDate", "RepairEndDate", "Result", "StaffName"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDeviceViewAttention.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDeviceViewAttentionMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblDeviceViewAttention);
        if (tblDeviceViewAttention.getColumnModel().getColumnCount() > 0) {
            tblDeviceViewAttention.getColumnModel().getColumn(0).setMinWidth(40);
            tblDeviceViewAttention.getColumnModel().getColumn(0).setMaxWidth(50);
            tblDeviceViewAttention.getColumnModel().getColumn(1).setPreferredWidth(40);
            tblDeviceViewAttention.getColumnModel().getColumn(2).setMinWidth(80);
            tblDeviceViewAttention.getColumnModel().getColumn(2).setPreferredWidth(20);
            tblDeviceViewAttention.getColumnModel().getColumn(2).setMaxWidth(100);
            tblDeviceViewAttention.getColumnModel().getColumn(8).setPreferredWidth(20);
        }

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(50, 59, 236));
        jLabel10.setText("Devices have not repaired for 2 days after requesting: ");
        jLabel10.setToolTipText("");

        btGetRequiredDev.setText("Get Required Device");
        btGetRequiredDev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGetRequiredDevActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1105, Short.MAX_VALUE)
                                .addComponent(jScrollPane3))
                            .addComponent(jLabel10))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btGetRequiredDev)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(580, 580, 580)
                        .addComponent(jLabel1)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(btGetRequiredDev, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtDepIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDepIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepIDActionPerformed

    private void tblDeviceViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDeviceViewMouseClicked
        // TODO add your handling code here:
        //1. nhận request
        txtRepID.setEditable(false); //view not edit!
        txtDevID.setEditable(false);
        int row = tblDeviceView.getSelectedRow();
        int repID = (Integer) tblDeviceModel.getValueAt(row, 0);
        try {
            DeviceDepartmentRelateMaintainanceDAO deviceRelaMainDAO = new DeviceDepartmentRelateMaintainanceDAO();
            DeviceDepartmentRelateMaintainanceDTO deviceRelaMainDTO = deviceRelaMainDAO.findByPrimaryKey(repID);

            txtRepID.setText(repID + "");
            txtDepID.setText(deviceRelaMainDTO.getDepID() + "");
            txtDevID.setText(deviceRelaMainDTO.getDevID() + "");
            txtRepairContent.setText(deviceRelaMainDTO.getRepairContent());
            txtResult.setText(deviceRelaMainDTO.getResult());
            txtStaffName.setText(deviceRelaMainDTO.getStaffName());
            //
//            Date date = new Date(deviceRelaMainDTO.getRepairEndDate().getTime());
//            endDateChooser.setDate(date);
            //
        } catch (Exception e) {
//            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
            LogFileText.writeToLogFile("StaffViewMode", e.getMessage());
        }
    }//GEN-LAST:event_tblDeviceViewMouseClicked

    private void txtRepIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRepIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRepIDActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed

        int repID = 0;
        int depID = 0;
        try {
            repID = Integer.parseInt(txtRepID.getText());
            if (repID < 0) {
                throw new Exception("ID must begin from 1");
            }
        } catch (Exception e) {
//            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
            LogFileText.writeToLogFile("StaffViewMode", e.getMessage());
        }

        try {
            depID = Integer.parseInt(txtDepID.getText());
            if (depID < 0) {
                throw new Exception("ID must begin from 1");
            }
        } catch (Exception e) {
//            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
            LogFileText.writeToLogFile("StaffViewMode", e.getMessage());
        }

        String repairContent = txtRepairContent.getText();

        //get date when start update repair
        Calendar cal = Calendar.getInstance();
        Timestamp timeStartRepair = new Timestamp(cal.getTimeInMillis());

        //get End Date from view
        Calendar calEndDate = endDateChooser.getCalendar();
        Timestamp timeEndRepair = new Timestamp(calEndDate.getTimeInMillis());

        String result = txtResult.getText();
        String staffName = txtStaffName.getText();
        String invalid = "";
        if (repairContent.trim().length() == 0) {
            invalid += "repairContent can't be blank";
        }
        if (result.length() == 0) {
            invalid += "repair can't be blank";
        }
        if (staffName.length() == 0) {
            invalid += "staff name can't be blank";
        }
        if (invalid.equals("")) {
            try {
                DeviceDepartmentRelateMaintainanceDTO dto = new DeviceDepartmentRelateMaintainanceDTO(depID, repID, repairContent, result, timeStartRepair, timeEndRepair, staffName);
                DeviceDepartmentRelateMaintainanceDAO dao = new DeviceDepartmentRelateMaintainanceDAO();
                if (dao.updateDepID(dto) && dao.updateDateRepairContentResult(dto)) {
                    JOptionPane.showMessageDialog(this, "Update success");
                    //cap nhat lai cho table
                    //vấn đề là chỉ update 1 cột thôi, trong khi 1 device có thể 
                    //sửa nhiều lần nên phải nhiều row => show lại list
                    showAllDeviceManagingController();
                } else {
                    JOptionPane.showMessageDialog(this, "Update failed");
                    
                }
            } catch (Exception e) {
                e.printStackTrace();
                LogFileText.writeToLogFile("StaffViewMode", e.getMessage());
                JOptionPane.showMessageDialog(this, "Something wrong with your ID inputs!");
            }
        } else {
            JOptionPane.showMessageDialog(this, invalid);
        }

    }//GEN-LAST:event_btUpdateActionPerformed

    private void txtStaffNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStaffNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStaffNameActionPerformed

    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        int devID = 0;
        try {
            devID = Integer.parseInt(txtDevIDToSearch.getText());
        } catch (NumberFormatException e) {
//            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "ID must be a number, you can see it from the table");
            LogFileText.writeToLogFile("StaffViewMode", e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Something wrong with your devID input");
            LogFileText.writeToLogFile("StaffViewMode", e.getMessage());
        }    
        try {
            DeviceDepartmentRelateMaintainanceDAO dao = new DeviceDepartmentRelateMaintainanceDAO();
            List<DeviceDepartmentRelateMaintainanceDTO> dtoList = dao.findByPrimaryKeyToViewDevSearchedOnTbl(devID);
            if (!dtoList.isEmpty()) {
                showDevSearched(dtoList);
            } else {
                JOptionPane.showMessageDialog(this, "ID not found");
            }
        } catch (Exception e) {
//            e.printStackTrace();
            LogFileText.writeToLogFile("StaffViewMode", e.getMessage());
        }
    }//GEN-LAST:event_btSearchActionPerformed

    private void tblDeviceViewAttentionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDeviceViewAttentionMouseClicked
        // TODO add your handling code here:
                //1. nhận request
        txtRepID.setEditable(false); //view not edit!
        txtDevID.setEditable(false);
        int row = tblDeviceViewAttention.getSelectedRow();
        int repID = (Integer) tblDeviceModelAttention.getValueAt(row, 0);
        try {
            DeviceDepartmentRelateMaintainanceDAO deviceRelaMainDAO = new DeviceDepartmentRelateMaintainanceDAO();
            DeviceDepartmentRelateMaintainanceDTO deviceRelaMainDTO = deviceRelaMainDAO.findByPrimaryKey(repID);

            txtRepID.setText(repID + "");
            txtDepID.setText(deviceRelaMainDTO.getDepID() + "");
            txtDevID.setText(deviceRelaMainDTO.getDevID() + "");
            txtRepairContent.setText(deviceRelaMainDTO.getRepairContent());
            txtResult.setText(deviceRelaMainDTO.getResult());
            txtStaffName.setText(deviceRelaMainDTO.getStaffName());
            //
//            Date date = new Date(deviceRelaMainDTO.getRepairEndDate().getTime());
//            endDateChooser.setDate(date);
            //
        } catch (Exception e) {
//            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
            LogFileText.writeToLogFile("StaffViewMode", e.getMessage());
        }
        
    }//GEN-LAST:event_tblDeviceViewAttentionMouseClicked

    private void btGetRequiredDevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGetRequiredDevActionPerformed
        // TODO add your handling code here:
        showListDeviceTobePayAttention();
    }//GEN-LAST:event_btGetRequiredDevActionPerformed

    private void btBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBackActionPerformed
        // TODO add your handling code here:
        showAllDeviceManagingController();
    }//GEN-LAST:event_btBackActionPerformed
    private void showDevSearched(List<DeviceDepartmentRelateMaintainanceDTO> dto) {
        tblDeviceModel.setRowCount(0);
        for (DeviceDepartmentRelateMaintainanceDTO dtoObj : dto) {
            tblDeviceModel.addRow(dtoObj.toVector());
        }
        
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StaffViewMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StaffViewMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StaffViewMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StaffViewMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        

            /* Create and display the form */

            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    try {
                        UIManager.setLookAndFeel(new MaterialLookAndFeel());
                    } catch (UnsupportedLookAndFeelException e) {
                        e.printStackTrace();
                    }

                    new StaffViewMode().setVisible(true);

                }
            });
            
    }


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBack;
    private javax.swing.JButton btGetRequiredDev;
    private javax.swing.JButton btSearch;
    private javax.swing.JButton btUpdate;
    private com.toedter.calendar.JDateChooser endDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private com.toedter.components.JLocaleChooser jLocaleChooser1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private com.toedter.components.JSpinField jSpinField1;
    private javax.swing.JTable tblDeviceView;
    private javax.swing.JTable tblDeviceViewAttention;
    private javax.swing.JTextField txtDepID;
    private javax.swing.JTextField txtDevID;
    private javax.swing.JTextField txtDevIDToSearch;
    private javax.swing.JTextField txtRepID;
    private javax.swing.JTextArea txtRepairContent;
    private javax.swing.JTextField txtResult;
    private javax.swing.JTextField txtStaffName;
    // End of variables declaration//GEN-END:variables
}
